//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Lik = newLikTable("", "lik", "")

type likTable struct {
	sqlite.Table

	// Columns
	Username sqlite.ColumnString
	BlurtID  sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type LikTable struct {
	likTable

	EXCLUDED likTable
}

// AS creates new LikTable with assigned alias
func (a LikTable) AS(alias string) *LikTable {
	return newLikTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LikTable with assigned schema name
func (a LikTable) FromSchema(schemaName string) *LikTable {
	return newLikTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LikTable with assigned table prefix
func (a LikTable) WithPrefix(prefix string) *LikTable {
	return newLikTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LikTable with assigned table suffix
func (a LikTable) WithSuffix(suffix string) *LikTable {
	return newLikTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLikTable(schemaName, tableName, alias string) *LikTable {
	return &LikTable{
		likTable: newLikTableImpl(schemaName, tableName, alias),
		EXCLUDED: newLikTableImpl("", "excluded", ""),
	}
}

func newLikTableImpl(schemaName, tableName, alias string) likTable {
	var (
		UsernameColumn = sqlite.StringColumn("username")
		BlurtIDColumn  = sqlite.StringColumn("blurt_id")
		allColumns     = sqlite.ColumnList{UsernameColumn, BlurtIDColumn}
		mutableColumns = sqlite.ColumnList{}
		defaultColumns = sqlite.ColumnList{}
	)

	return likTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Username: UsernameColumn,
		BlurtID:  BlurtIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
